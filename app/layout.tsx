import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Providers from "@/components/Providers";
import { Toaster } from 'sonner';
import Header from "@/components/Header";
import ThemeProvider from "@/components/ThemeProvider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html suppressHydrationWarning lang="en">
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              (function() {
                const FONTS = {
                  system: 'ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont',
                  serif: 'ui-serif, Georgia, Cambria, "Times New Roman", Times',
                  mono: 'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono"',
                };
                try {
                  const theme = localStorage.getItem('lexical-mini-theme');
                  if (theme === 'dark') {
                    document.documentElement.classList.add('dark');
                  }
                  const fontFamily = localStorage.getItem('lexical-mini-font-family');
                  const fontSize = localStorage.getItem('lexical-mini-font-size');
                  if (fontFamily && FONTS[fontFamily]) {
                    document.documentElement.style.setProperty('--font-body', FONTS[fontFamily]);
                  }
                  if (fontSize) {
                    document.documentElement.style.setProperty('--font-size', fontSize + 'px');
                  }
                } catch (e) {}
              })();
            `,
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Providers>
          <ThemeProvider>
            <Header />
            <Toaster position="bottom-right" richColors />
            {children}
          </ThemeProvider>
        </Providers>
      </body>
    </html>
  );
}